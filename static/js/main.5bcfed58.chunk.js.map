{"version":3,"sources":["index.js"],"names":["Diamond","props","nodes","useLoader","GLTFLoader","geo","useMemo","THREE","fromBufferGeometry","Cylinder","geometry","useConvexPolyhedron","mass","args","onCollide","e","console","log","contact","impactVelocity","ref","castShadow","dispose","attach","transparent","opacity","Plane","usePlane","receiveShadow","color","ReactDOM","render","shadowMap","colorManagement","gl","alpha","camera","position","fov","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","allowSleep","rotation","Math","PI","fallback","document","getElementById"],"mappings":"sSAQA,SAASA,EAAQC,GACf,IAAQC,EAAUC,YAAUC,IAAY,gBAAhCF,MACFG,EAAMC,mBAAQ,kBAAM,IAAIC,YAAiBC,mBAAmBN,EAAMO,SAASC,YAAW,CAACR,IAC7F,EAAcS,aAAoB,8BAAC,aAAQC,KAAM,KAAQX,GAAvB,IAA8BY,KAAMR,EAAKS,UAAW,SAAAC,GAAC,OAAIC,QAAQC,IAAI,YAAaF,EAAEG,QAAQC,sBAAvHC,EAAP,oBACA,OACE,0BAAMC,YAAU,EAACD,IAAKA,EAAKV,SAAUR,EAAMO,SAASC,SAAUY,QAAS,MACrE,wCAAoBC,OAAO,WAAWC,aAAW,EAACC,QAAS,OAKjE,SAASC,EAAMzB,GACb,MAAc0B,aAAS,+BAASf,KAAM,GAAMX,MAArCmB,EAAP,oBACA,OACE,0BAAMA,IAAKA,EAAKQ,eAAa,GAC3B,yCAAqBL,OAAO,WAAWV,KAAM,CAAC,GAAI,MAClD,oCAAgBU,OAAO,WAAWM,MAAM,UAAUJ,QAAS,MAKjEK,IAASC,OACP,kBAAC,IAAD,CAAQC,WAAS,EAACC,iBAAe,EAACC,GAAI,CAAEC,OAAO,GAASC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,IAAK,KAC1F,2BAAOf,OAAO,aAAaV,KAAM,CAAC,eAClC,qCAAiB0B,UAAW,MAC5B,+BAAWF,SAAU,CAAC,EAAG,EAAG,GAAIG,MAAO,GAAKC,SAAU,EAAGF,UAAW,EAAGlB,YAAU,EAACqB,uBAAsB,IAAKC,wBAAuB,MACpI,kBAAC,IAAD,CAASC,YAAU,GACjB,kBAAClB,EAAD,CAAOmB,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,KACnC,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAChD,EAAD,CAASqC,SAAU,CAAC,EAAG,EAAG,GAAIQ,SAAU,CAAC,GAAK,GAAK,SAIzDI,SAASC,eAAe,U","file":"static/js/main.5bcfed58.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, useMemo } from 'react'\nimport { Canvas, useLoader } from 'react-three-fiber'\nimport { Physics, usePlane, useConvexPolyhedron } from 'use-cannon'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport './styles.css'\n\nfunction Diamond(props) {\n  const { nodes } = useLoader(GLTFLoader, '/diamond.glb')\n  const geo = useMemo(() => new THREE.Geometry().fromBufferGeometry(nodes.Cylinder.geometry), [nodes])\n  const [ref] = useConvexPolyhedron(() => ({ mass: 100, ...props, args: geo, onCollide: e => console.log('collision', e.contact.impactVelocity) }))\n  return (\n    <mesh castShadow ref={ref} geometry={nodes.Cylinder.geometry} dispose={null}>\n      <meshNormalMaterial attach=\"material\" transparent opacity={0.85} />\n    </mesh>\n  )\n}\n\nfunction Plane(props) {\n  const [ref] = usePlane(() => ({ mass: 0, ...props }))\n  return (\n    <mesh ref={ref} receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[50, 50]} />\n      <shadowMaterial attach=\"material\" color=\"#171717\" opacity={0.5} />\n    </mesh>\n  )\n}\n\nReactDOM.render(\n  <Canvas shadowMap colorManagement gl={{ alpha: false }} camera={{ position: [1, 1, 5], fov: 50 }}>\n    <color attach=\"background\" args={['lightpink']} />\n    <hemisphereLight intensity={0.35} />\n    <spotLight position={[5, 5, 5]} angle={0.3} penumbra={1} intensity={2} castShadow shadow-mapSize-width={256} shadow-mapSize-height={256} />\n    <Physics allowSleep>\n      <Plane rotation={[-Math.PI / 2, 0, 0]} />\n      <Suspense fallback={null}>\n        <Diamond position={[0, 5, 0]} rotation={[0.1, 0.1, 0.1]} />\n      </Suspense>\n    </Physics>\n  </Canvas>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}